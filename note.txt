一、在IDEA里面新建spring boot的醒目：
    1.打开IDEA,创建新项目，选择Spring Initializr；
    2、添加配置：<dependency>
                      <groupId>org.springframework.boot</groupId>
                       <artifactId>spring-boot-starter-web</artifactId>
                  </dependency>
二、访问HTML文件(实例：TemplatesController.java)：
    1、在pom里面添加配置：<dependency>
                                <groupId>org.springframework.boot</groupId>
                                <artifactId>spring-boot-starter-thymeleaf</artifactId>
                 		   </dependency>
     2、在项目目录：resources中新建“templates”文件夹，把HTML文件放入templates文件夹;
     3、在application.yml里面配置上：spring:
                                    thymeleaf:
                                        prefix: classpath:/templates/
     3、在controller里面只需要写入跟html一样的文件名作为返回值就可以，springboot会自己去关联，并返回给浏览器;
     4、接口controller里面只能用@Controller标签来修饰cotroller类，不能使用@RestController来修饰

 三、打包发布：
    1、通过idea的maven试图来打包，调出maven的试图，在clean之后点击install，会在项目的同级目录中生成target文件夹
    ，在target文件夹中有和项目同名的.jar包生成。
    2、可以把生成的jar包拷贝到要发布的磁盘中，然后cmd进入到jar放的目录，执行命令：java -jar hyk-0.0.1.jar，
    就可以运行发布项目了
    3、如果是都多环境的配置，进入jar放的目录之后，要执行命令：java -jar hyk-0.0.1.jar --spring.profiles.active=dev
    
  四、异常处理：
    a、 可以使用@ControllerAdvice注解异常类来帮助捕获异常，@ControllerAdvice放在controller类上，
    使用这种方式可以自定义捕获到的异常：  @ResponseBody
                                          @ExceptionHandler(value = Exception.class)
                                          public Map<String,Object> errorHandler(Exception ex){
                                              Map<String,Object> map = new HashMap<>();
                                              map.put("code",-1);
                                              map.put("msg",ex.getMessage());
                                              return map;
                                          }
    b、如果不自己捕获异常的话，请求服务器是500状态，自己捕获异常进行处理的话，请求服务器的状态是200，并且可以自定义返回的参数

    五、配置mybatis：
        1、在项目的application.properties里面添加mybatis的配置：
                                                                mybatis.type-aliases-package=com.example.demo.model
                                                                mybatis.config-location=classpath:mybatis.xmlspring:
                                                                datasource.url= jdbc:mysql://localhost:3306/spring_boot?useUnicode=true&characterEncoding=utf8&autoReconnect=true
                                                                datasource.username= root
                                                                datasource.password= 123456
        2、在resources/目录下面添加文件：mybatis.xml文件
        3、在pom文件里面添加mybatis的配置：
                    <!--mybatis的配置-->
                    <dependency>
                        <groupId>org.mybatis.spring.boot</groupId>
                        <artifactId>mybatis-spring-boot-starter</artifactId>
                        <version>1.3.2</version>
                    </dependency>
                    <dependency>
                        <groupId>mysql</groupId>
                        <artifactId>mysql-connector-java</artifactId>
                        <scope>runtime</scope>
                    </dependency>

        4、自动化生成model和map文件，在进行配置自动化生成之前，需要先：新建数据库，和数据表，配置：
            a、在resources/文件夹里面加入文件：genratorConfig.xml文件，修改文件里面的数据库，地址、端口、数据库名称、用户名、密码的配置：
                                                                        <jdbcConnection driverClass="com.mysql.jdbc.Driver"
                                                                            connectionURL="jdbc:mysql://localhost:3306/spring-boot-demo"
                                                                            userId="root"
                                                                            password="123456">
                                                                        </jdbcConnection>
                修改指定models需要生成在那个文件夹：<javaModelGenerator targetPackage="com.example.demo.models"></javaModelGenerator>
                修改表明和生成的model的名字：<table tableName="t_user" domainObjectName="TUser"  enableCountByExample="false" enableUpdateByExample="false" enableDeleteByExample="false" enableSelectByExample="false" selectByExampleQueryId="false"></table>
            b、在pom.xml文件里面添加配置：
                <!--mybatis的自动化配置-->
                            <plugin>
                                <!--mybatis Generator支持-->
                                <groupId>org.mybatis.generator</groupId>
                                <artifactId>mybatis-generator-maven-plugin</artifactId>
                                <version>1.3.5</version>
                                <configuration>
                                    <verbose>true</verbose>
                                    <overwrite>true</overwrite>
                                </configuration>
                                <dependencies>
                                    <!-- https://mvnrepository.com/artifact/mysql/mysql-connector-java 配置这个依赖主要是为了等下在配置MG的时候可以不用配置classPathEntry这样的一个属性，避免
                                        代码的耦合度太高 -->
                                    <dependency>
                                        <groupId>mysql</groupId>
                                        <artifactId>mysql-connector-java</artifactId>
                                        <version>5.1.38</version>
                                    </dependency>
                                </dependencies>
                            </plugin>
                            <!--mybatis的自动化配置-->
